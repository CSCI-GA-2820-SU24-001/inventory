apiVersion: tekton.dev/v1
kind: Task
metadata:
  name: pytest-env
  annotations:
    tekton.dev/categories: Testing
    tekton.dev/displayName: pytest tests
    tekton.dev/pipelines.minVersion: "0.17.0"
    tekton.dev.platforms: "linux/amd64,linux/s390x,linux/ppc64le"
    tekton.dev/tags: "python, pytest"
  labels:
    app.kubernetes.io/version: "0.1"
spec:
  description: >
    This task can be used to perform unit tests with pytest. It supports both requirements.txt and poetry.lock files.
    It also has the ability to create an environment variable that is sourced from a Secret. This allows you to define credentials that can be used to connect to a test database.
  params:
    - name: pytest-args
      type: array
      description: The arguments to pass to the pytest CLI.
      default: []
    - name: secret-name
      type: string
      description: The name of the secret containing a database_uri key
      default: postgres-creds
    - name: secret-key
      type: string
      description: The name of the key that contains the database uri
      default: database_uri
  steps:
    - name: pytest
      image: "docker.io/python:3.11-slim"
      script: |
        #!/bin/bash
        set -e
        export PATH=$PATH:$HOME/.local/bin:

        echo "***** Installing dependencies *****"
        if [ -e "poetry.lock" ]; then
          echo "Found poetry.lock file: using poetry "
          python -m pip install poetry poetry-plugin-export
          poetry export --with=dev -f requirements.txt --output requirements.txt
          python -m pip install --user -r requirements.txt
        elif [ -e "requirements.txt" ]; then
          python -m pip install --user -r requirements.txt
        fi

        # Make sure pytest is installed
        python -m pip install pytest

        echo "***** Running Tests *****"
        pytest --version
        pytest $(params.pytest-args)
      env:
        - name: DATABASE_URI
          valueFrom:
            secretKeyRef:
              name: $(params.secret-name)
              key: $(params.secret-key)
      workingDir: $(workspaces.source.path)
  workspaces:
    - name: source
